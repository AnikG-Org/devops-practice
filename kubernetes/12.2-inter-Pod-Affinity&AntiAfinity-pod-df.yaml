#nodeAffinity: podAffinity     label selector 'team:4'

apiVersion: v1
kind: Pod
metadata:
  name: team4a
spec:
  containers:
    - name: nginx-container
      image: nginx
      imagePullPolicy: IfNotPresent
      resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: "0.5"
            memory: 256Mi

  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: team
            operator: In
            values:
            - "4"
        topologyKey: kubernetes.io/hostname

#The team4a pod is scheduled on the same node even if the other existing pods with samelevel [label='team:4'].
#Pod affinity can tell the scheduler to locate a new pod on the same node as other pods if the label selector on the new pod matches the label on the current pod.
---
#nodeAffinity: podAntiAffinity     label selector 'team:5'

apiVersion: v1
kind: Pod
metadata:
  name: team5a
spec:
  containers:
    - name: nginx-container
      image: nginx
      imagePullPolicy: IfNotPresent
      resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: "0.5"
            memory: 256Mi
            
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution: 
      - weight: 100  
        podAffinityTerm:
        - labelSelector:
            matchExpressions:
            - key: team
              operator: In
              values:
              - "5"
          topologyKey: kubernetes.io/hostname

#The team5a pod is scheduled on the same node[label='team:5']when the other pods with same level doesn't exist, if exist then cannot be scheduled on the same node.
#Pod anti-affinity can prevent the scheduler from locating a new pod on the same node as pods with the same labels if the label selector on the new pod matches the label on the current pod.