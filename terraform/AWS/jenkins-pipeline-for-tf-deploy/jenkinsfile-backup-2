pipeline {
    agent any
    tools {
       "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform" 
    }

    parameters {
        string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }
    
    environment {
        TF_API_TOKEN          = credentials('terraform-auth')
        TF_HOME               = tool('terraform')
        PATH                  = "$TF_HOME:$PATH"
        TF_INPUT              = "0"
        TF_LOG                ="WARN"
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = "TRUE"

    }



    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'mkdir -p $HOME/.terraform.d/' 
                sh 'echo $TF_API_TOKEN | base64 -d > $HOME/.terraform.d/credentials.tfrc.json'
            }
        }
        stage('Init'){
            steps {
                dir("terraform/AWS/AWS_modules/projects/project_demo"){
                    sh 'terraform --version'
                    sh "terraform init"
                }
            }
        }
        stage('Validate'){
            steps {
                dir("terraform/AWS/AWS_modules/projects/project_demo"){
                    sh 'terraform validate'
                }
            }
        }
        stage('SelectWorkspace_&_Plan'){
            steps {
                dir("terraform/AWS/AWS_modules/projects/project_demo"){
                  script {
                        try {
                           sh "terraform workspace new ${environment}"
                        } catch (err) {
                            sh "terraform workspace select ${environment}"
                        }
                        sh "terraform plan  -out tfplan  --var-file=environments/${params.environment}.tfvars"
                        sh 'terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }        
        }


        stage('Approval_for_apply') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                sh "terraform apply tfplan"
            }
        }
    
/*
        stage('ApplyWithRoleback_when_apply=false'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'confirm apply', ok: 'Apply Config'
                        apply = true
                    } catch (err) {
                        apply = false
                        dir("terraform/AWS/AWS_modules/projects/project_demo"){
                            sh "terraform destroy -auto-approve"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        dir("terraform/AWS/AWS_modules/projects/project_demo"){
                            sh 'terraform apply tfplan'
                        }
                    }
                }
            }
        }        
*/
        stage('destroy_when_apply_is_true'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'confirm Terraform destroy', ok: 'Destroy Config'
                        apply = true
                    } catch (err) {
                        apply = false
                        dir("terraform/AWS/AWS_modules/projects/project_demo"){
                            sh "echo 'terraform destroy CANCELED'"
                        }
                    }

                    if(apply){
                        dir("terraform/AWS/AWS_modules/projects/project_demo"){
                            sh "terraform destroy -auto-approve"
                        }
                    }
                }
            }
        }

    }    


    post {
        always {
            archiveArtifacts artifacts: 'tfplan.txt'
        }
    }
}