import "tfplan"

mandatory_tags = [
    "ghs-los",
    "ghs-solution",
    "ghs-environment",
    "ghs-tariff",
    "ghs-owner",
    "ghs-apptioid",
    "ghs-srid",
]
test_tags = [
    "test",
    "bar",
]

check_module_resources_for_tags = func(required_tags){
    untagged_resources = []
    for tfplan.module_paths as path {
        print("Checking Module: ",path)
        for tfplan.module(path).resources as type {
            print("--Checking Module Resource type: ",type)
            for tfplan.module(path).resources[type] as resource{
                print("---Checking Resource : ",resource)
                for tfplan.module(path).resources[type][resource] as index{
                    for tfplan.module(path).resources[type][resource][index]["applied"] as att{
                        if "tags" in keys(tfplan.module(path).resources[type][resource][index]["applied"]){
                            missing_tags = false
                            for required_tags as tag{
                                if tag in keys(tfplan.module(path).resources[type][resource][index]["applied"]["tags"]){
                                    print("----Resource: [",resource,"] has the tag: ",tag)
                                } else {
                                    missing_tags = true
                                    print("----Resource: [",resource,"] does not have the tag: ",tag)
                                }
                            }
                            if (missing_tags is true){
                                append(untagged_resources, resource)
                            }
                        } else {
                            print("----Resource: [",resource,"] cannot be tagged")
                        }
                    }
                }
            }
        }
    }
    if length(untagged_resources) > 0{
        print("The following resources are missing tags: ")
        for untagged_resources as r {
            print("     -",r)
        }
        return false
    }
    return true
}
/*
check_resources_for_tags = func(required_tags){
    resources = tfplan.resources
    untagged_resources = []
    for resources as type{
        print("Checking resource type: ",type)
        for tfplan.resources[type] as name, collection {
            print("  Checking resource: ",name)
            if ("tags" in keys(tfplan.resources[type][name][0]["applied"])){
                missing_tags = false
                for required_tags as tag {
                    if (tag in keys(tfplan.resources[type][name][0]["applied"]["tags"])){
                        print("    Resource: ",name," has the tag: ",tag)
                    } else {
                        missing_tags = true
                        print("    Resource: ",name," is missing the tag: ",tag)
                    }
                }
                if (missing_tags is true){
                    append(untagged_resources, name)
                }
            } else {
                print("    Resource: ",name," is not taggable.")
            }
            }
        }
    if length(untagged_resources) > 0{
        print("The following resources are missing tags: ")
        for untagged_resources as r {
            print("     -",r)
        }
        return false
    }
    return true
    }
*/

tags_present = rule {
    check_module_resources_for_tags(mandatory_tags) is not false
}
main = rule {
   tags_present
}

