apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: networking
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: net.aws.crossplane.awscommunity.io/v1alpha1
    kind: XNetworking

  writeConnectionSecretsToNamespace: crossplane-system

  patchSets:
  - name: networkconfig
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.labels[net.aws.crossplane.awscommunity.io/network-id] # the network-id other Composition MRs (like EKSCluster) will use
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region

  resources:
    ### VPC and InternetGateway
    - name: platform-vcp
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            cidrBlock: 10.0.0.0/16
            enableDnsSupport: true
            enableDnsHostnames: true
            tags:
              Owner: Platform Team
              Name: platform-vpc
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
    
    - name: gateway
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: networkconfig


    ### Subnet Configuration
    - name: subnet-public-eu-central-1a
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            access: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            cidrBlock: 10.0.0.0/24
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/elb: "1"
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        # define eu-central-1a as zone & availabilityZone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: metadata.labels.zone
          transforms:
            - type: string
              string:
                fmt: "%sa"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sa"
        # provide the subnetId for later use as status.subnetIds entry
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: status.subnetIds[0]
    
    - name: subnet-public-eu-central-1b
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            access: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            cidrBlock: 10.0.1.0/24
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/elb: "1"
      patches:
        - type: PatchSet
          patchSetName: networkconfig
          # define eu-central-1b as zone & availabilityZone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: metadata.labels.zone
          transforms:
            - type: string
              string:
                fmt: "%sb"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sb"
          # provide the subnetId for later use as status.subnetIds entry
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: status.subnetIds[1]

    - name: subnet-public-eu-central-1c
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            access: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            cidrBlock: 10.0.2.0/24
            vpcIdSelector:
              matchControllerRef: true
            tags:
              kubernetes.io/role/elb: "1"
      patches:
        - type: PatchSet
          patchSetName: networkconfig
          # define eu-central-1c as zone & availabilityZone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: metadata.labels.zone
          transforms:
            - type: string
              string:
                fmt: "%sc"
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.availabilityZone
          transforms:
            - type: string
              string:
                fmt: "%sc"
          # provide the subnetId for later use as status.subnetIds entry
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: status.subnetIds[2]  

    ### SecurityGroup & SecurityGroupRules Cluster API server
    - name: securitygroup-cluster
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroup
        metadata:
          labels:
            net.aws.crossplane.awscommunity.io: securitygroup-cluster
        spec:
          forProvider:
            description: cluster API server access
            name: securitygroup-cluster
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          # provide the securityGroupId for later use as status.securityGroupClusterIds entry
        - type: ToCompositeFieldPath
          fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: status.securityGroupClusterIds[0]

    - name: securitygrouprule-cluster-inbound
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroupRule
        spec:
          forProvider:
            #description: Allow pods to communicate with the cluster API server & access API server from kubectl clients
            type: ingress
            cidrBlocks:
              - 0.0.0.0/0
            fromPort: 443
            toPort: 443
            protocol: tcp
            securityGroupIdSelector:
              matchLabels:
                net.aws.crossplane.awscommunity.io: securitygroup-cluster
      patches:
        - type: PatchSet
          patchSetName: networkconfig

    - name: securitygrouprule-cluster-outbound
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: SecurityGroupRule
        spec:
          forProvider:
            description: Allow internet access from the cluster API server
            type: egress
            cidrBlocks: # Destination
              - 0.0.0.0/0
            fromPort: 0
            toPort: 0
            protocol: tcp
            securityGroupIdSelector:
              matchLabels:
                net.aws.crossplane.awscommunity.io: securitygroup-cluster
      patches:
        - type: PatchSet
          patchSetName: networkconfig

    ### SecurityGroup & SecurityGroupRules Worker Nodes
    ### The configs are already done by the automatically provisioned SecurityGroup:
    ### 'EKS created security group applied to ENI that is attached to EKS Control Plane master nodes, as well as any managed workloads.'
    # - name: securitygroup-nodepool
    #   base:
    #     apiVersion: ec2.aws.upbound.io/v1beta1
    #     kind: SecurityGroup
    #     metadata:
    #       labels:
    #         net.aws.crossplane.awscommunity.io: securitygroup-nodepool
    #     spec:
    #       forProvider:
    #         description: worker nodes access
    #         name: securitygroup-nodepool
    #         vpcIdSelector:
    #           matchControllerRef: true
    #   patches:
    #     - type: PatchSet
    #       patchSetName: networkconfig
    #     - fromFieldPath: spec.id
    #       toFieldPath: metadata.name
    #       # provide the securityGroupId for later use as status.securityGroupNodepoolIds entry
    #     - type: ToCompositeFieldPath
    #       fromFieldPath: metadata.annotations[crossplane.io/external-name]
    #       toFieldPath: status.securityGroupNodepoolIds[0]

    # - name: securitygrouprule-nodepool-inbound
    #   base:
    #     apiVersion: ec2.aws.upbound.io/v1beta1
    #     kind: SecurityGroupRule
    #     spec:
    #       forProvider:
    #         description: Allow nodes to communicate with each other
    #         type: ingress
    #         cidrBlocks: # Allow all communictation in the Subnet
    #           - 10.0.0.0/24
    #         protocol: all
    #         securityGroupIdSelector:
    #           matchLabels:
    #             net.aws.crossplane.awscommunity.io: securitygroup-nodepool
    #   patches:
    #     - type: PatchSet
    #       patchSetName: networkconfig

    # - name: securitygrouprule-nodepool-outbound
    #   base:
    #     apiVersion: ec2.aws.upbound.io/v1beta1
    #     kind: SecurityGroupRule
    #     spec:
    #       forProvider:
    #         description: Allow internet access from the worker nodes
    #         type: egress
    #         cidrBlocks: # Destination
    #           - 0.0.0.0/0
    #         fromPort: 0
    #         toPort: 0
    #         protocol: tcp
    #         securityGroupIdSelector:
    #           matchLabels:
    #             net.aws.crossplane.awscommunity.io: securitygroup-nodepool
    #   patches:
    #     - type: PatchSet
    #       patchSetName: networkconfig

    ### Route, RouteTable & RouteTableAssociations
    - name: route
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: Route
        spec:
          forProvider:
            destinationCidrBlock: 0.0.0.0/0
            gatewayIdSelector:
              matchControllerRef: true
            routeTableIdSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: networkconfig

    - name: routeTable
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
      patches:
      - type: PatchSet
        patchSetName: networkconfig

    - name: mainRouteTableAssociation
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: MainRouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            vpcIdSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: networkconfig

    - name: RouteTableAssociation-public-a
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: public
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        # define eu-central-1a as subnetIdSelector.matchLabels.zone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - type: string
              string:
                fmt: "%sa"

    - name: RouteTableAssociation-public-b
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: public
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        # define eu-central-1b as subnetIdSelector.matchLabels.zone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - type: string
              string:
                fmt: "%sb"

    - name: RouteTableAssociation-public-c
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: RouteTableAssociation
        spec:
          forProvider:
            routeTableIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: public
      patches:
        - type: PatchSet
          patchSetName: networkconfig
        # define eu-central-1c as subnetIdSelector.matchLabels.zone
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
          transforms:
            - type: string
              string:
                fmt: "%sc"